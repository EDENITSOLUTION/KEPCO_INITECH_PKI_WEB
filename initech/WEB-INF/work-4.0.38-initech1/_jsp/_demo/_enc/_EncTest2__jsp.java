/*
 * JSP generated by Resin Professional 4.0.38 (built Tue, 17 Dec 2013 09:49:45 PST)
 */

package _jsp._demo._enc;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.io.*;
import java.util.*;
import java.lang.*;
import java.text.*;
import java.security.cert.X509Certificate;
import com.initech.iniplugin.*;

public class _EncTest2__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html;charset=EUC-KR");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    
	/*
	************************
	Request object \uc0ac\uc6a9 INIT()
	************************
	*/
	String m_IniErrCode = null;
	String m_IniErrMsg = null;
	System.out.println("11111111111111111111111111111111");
	IniPlugin m_IP = new IniPlugin(request,response,"/home/initech/iniplugin/properties/IniPlugin.inica70.properties");

  /*
	************************
	Post Data \ud655\uc778
	************************
	*/
	
	String INIdata = request.getParameter("INIpluginData");
	System.out.println("INIpluginData: "+INIdata);
	if (INIdata == null) 
	{
	              m_IniErrCode = ">>PLUGIN_000";
	              m_IniErrMsg = "Exception : INIpluginData is null";              
	}
	  else 
	{
	              try {
	                           m_IP.init();
	              } catch(PrivateKeyDecryptException e) {
	                           m_IniErrCode = "PLUGIN_001";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(CRLFileNotFoundException e) {
	                           m_IniErrCode = "PLUGIN_002";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(PropertyFileNotFoundException e) {
	                           m_IniErrCode = "PLUGIN_003";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(PrivateKeyFileNotFoundException e) {
	                           m_IniErrCode = "PLUGIN_004";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(CACertFileNotFoundException e) {
	                           m_IniErrCode = "PLUGIN_005";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(INIpluginDataAbnormalFormatException e) {
	                           m_IniErrCode = "PLUGIN_006";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(LongParseException e) {
	                           m_IniErrCode = "PLUGIN_007";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(PrivateKeyParseException e) {
	                           m_IniErrCode = "PLUGIN_008";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(CRLFileParseException e) {
	                           m_IniErrCode = "PLUGIN_009";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(CACertFileParseException e) {
	                           m_IniErrCode = "PLUGIN_010";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(ClientCertParseException e) {
	                           m_IniErrCode = "PLUGIN_011";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(AbnormalPropertyFileException e) {
	                           m_IniErrCode = "PLUGIN_012";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(PropertyNotFoundException e) {
	                           m_IniErrCode = "PLUGIN_013";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(VerifyDataDecryptException e) {
	                           m_IniErrCode = "PLUGIN_014";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(AbnormalVerifyDataException e) {
	                           m_IniErrCode = "PLUGIN_015";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(ExpiredVerifyDataException e) {
	                           m_IniErrCode = "PLUGIN_016";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(ClientCertValidityException e) {
	                           m_IniErrCode = "PLUGIN_017";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(SignatureVerifyException e) {
	                           m_IniErrCode = "PLUGIN_018";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(ClientCertRevokedException e) {
	                           m_IniErrCode = "PLUGIN_019";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(SessionKeyException e) {
	                           m_IniErrCode = "PLUGIN_020";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(EncryptDataException e) {
	                           m_IniErrCode = "PLUGIN_021";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(DecryptDataException e) {
	                           m_IniErrCode = "PLUGIN_022";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(CRLFileIOException e) {
	                           m_IniErrCode = "PLUGIN_023";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(PropertyFileIOException e) {
	                           m_IniErrCode = "PLUGIN_024";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(PrivateKeyFileIOException e) {
	                           m_IniErrCode = "PLUGIN_025";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(CACertFileIOException e) {
	                           m_IniErrCode = "PLUGIN_026";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(PropertyFileParseException e) {
	                           m_IniErrCode = "PLUGIN_027";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(VerifyFlagException e) {
	                           m_IniErrCode = "PLUGIN_028";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(IOException e) {
	                           m_IniErrCode = "PLUGIN_029";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(SignDataException e) {
	                           m_IniErrCode = "PLUGIN_030";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              } catch(Exception e) {
	                           m_IniErrCode = "PLUGIN_099";
	                           m_IniErrMsg = "Exception : " + e.getMessage();
	                           
	              }
	}
	if(m_IniErrCode != null)
	{
		out.println("<br><b>INISAFE Web 6.1 Server SDK - Init() ERROR</b>");
		out.println("<hr>");
		out.println("<br><b>Error Code</b> = <font color='red'>" + m_IniErrCode + "</font>");
		out.println("<br><b>Error Message</b> = " + m_IniErrMsg);
		return;
		
	}


    out.write(_jsp_string1, 0, _jsp_string1.length);
    
	boolean bEncrypt = false;
	String tmp = m_IP.getParameter("encrypt");
	if ((tmp != null) && tmp.equals("on")) bEncrypt = true;

	//\uc778\uc99d\uc774 \ud544\uc694\ud55c \ud398\uc774\uc9c0 \uc778\uc9c0 \uccb4\ud06c
	String strClientAuth = null;
	String certInfo = "";
	String serial="";
	if (m_IP.isClientAuth()==false)
		strClientAuth = "\uc0ac\uc6a9\uc790 \uc778\uc99d\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.";
	else {
		strClientAuth = "\uc0ac\uc6a9\uc790 \uc778\uc99d\uc774\ub41c \ud398\uc774\uc9c0\uc785\ub2c8\ub2e4.";

		X509Certificate userCert = m_IP.getClientCertificate();
		DateFormat myDate = new SimpleDateFormat("yyyy-MM-dd hh:mm ss");
		Date NotBefore = userCert.getNotBefore();	// \uc778\uc99d\uc11c \ubc1c\uae09\uc77c
		Date NotAfter = userCert.getNotAfter();		// \uc778\uc99d\uc11c \ub9cc\uae30\uc77c
		Date currentTime = new Date();				// \ud604\uc7ac \uc2dc\uac04
		int dateformat = (int) ((NotAfter.getTime() - currentTime.getTime()) / (24 * 60 * 60 * 1000));

		certInfo += "<br>\ubc1c\uae09\uc790 : " + userCert.getIssuerDN().toString();
		certInfo += "<br>\ubc1c\uae09\ub300\uc0c1 : " + userCert.getSubjectDN().toString();
		certInfo += "<br>\ubc1c\uae09\uc77c : " + myDate.format(NotBefore);
		certInfo += "<br>\ub9cc\ub8cc\uc77c : " + myDate.format(NotAfter);
		certInfo += "<br>Serial : " + userCert.getSerialNumber().toString(10);
		certInfo += "<br>\ud604\uc7ac\uc2dc\uac04 : " + myDate.format(currentTime);
		certInfo += "<br>\uace0\uac1d\ub2d8\uc758 \uc778\uc99d\uc11c\ub294 ";
		certInfo += dateformat;
		certInfo += "\uc77c \ud6c4\uc5d0 \ub9cc\ub8cc\uac00 \ub429\ub2c8\ub2e4.";
		
		serial=userCert.getSerialNumber().toString(10);

	}
//	out.println(request.getParameter("INIpluginData"));

	//\ud658\uacbd\uc124\uc815 \ubcc0\uc218 \uc77d\uc5b4\uc624\ub294 \uc608\uc81c
	String strEncAlg = m_IP.getProperty("DataEncryptAlg");
	String strIniJS = m_IP.getProperty("INIplugin.js");
	String strTime = m_IP.getProperty("TimeDifference");

	StringBuffer sb = new StringBuffer();
	Enumeration enumlist = m_IP.getParameterNames();
	while (enumlist.hasMoreElements()) {
		String nameval = (String)enumlist.nextElement();
		String value = m_IP.getParameter(nameval);
		sb.append("<br>[" + nameval + "] = [" + value + "]");
	}
	


    out.write(_jsp_string2, 0, _jsp_string2.length);
     if (bEncrypt) out = m_IP.startEncrypt(out); 
    out.write(_jsp_string3, 0, _jsp_string3.length);
    out.print((strClientAuth));
    out.write(_jsp_string4, 0, _jsp_string4.length);
    out.print((certInfo));
    out.write(_jsp_string5, 0, _jsp_string5.length);
    out.print((serial));
    out.write(_jsp_string6, 0, _jsp_string6.length);
    out.print((request.getParameter("INIpluginData")));
    out.write(_jsp_string7, 0, _jsp_string7.length);
    out.print((strEncAlg));
    out.write(_jsp_string8, 0, _jsp_string8.length);
    out.print((strIniJS));
    out.write(_jsp_string9, 0, _jsp_string9.length);
    out.print((strTime));
    out.write(_jsp_string10, 0, _jsp_string10.length);
    out.print(( sb.toString() ));
    out.write(_jsp_string11, 0, _jsp_string11.length);
    out.print(( m_IP.getDecryptParameter().toString() ));
    out.write(_jsp_string12, 0, _jsp_string12.length);
     if (bEncrypt) out = m_IP.endEncrypt(out); 
    out.write(_jsp_string13, 0, _jsp_string13.length);
  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != -1257324557874484737L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("demo/enc/EncTest2.jsp"), -6824869824204929791L, true);
    _caucho_depends.add(depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("demo/include/Init.jsp"), 4167850621049698805L, true);
    _caucho_depends.add(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string8;
  private final static char []_jsp_string12;
  private final static char []_jsp_string5;
  private final static char []_jsp_string3;
  private final static char []_jsp_string13;
  private final static char []_jsp_string4;
  private final static char []_jsp_string1;
  private final static char []_jsp_string11;
  private final static char []_jsp_string0;
  private final static char []_jsp_string6;
  private final static char []_jsp_string2;
  private final static char []_jsp_string7;
  private final static char []_jsp_string9;
  private final static char []_jsp_string10;
  static {
    _jsp_string8 = "\n<br>m_IP.getProperty(\"INIplugin.js\") = ".toCharArray();
    _jsp_string12 = "\n\n<br><br>\n<center><input type=button value=\"\ub418\ub3cc\uc544\uac00\uae30\" onClick=\"history.back();\"></center>\n<hr size=\"1\" width=\"550\" color=\"#CCCCCC\"></p>\n<p align=\"center\"><font size=\"2\">Copyright(c) 1997-2007 by INITECH</font><br></p>\n\n".toCharArray();
    _jsp_string5 = "\n<br>\n".toCharArray();
    _jsp_string3 = "\n\n<br><b>".toCharArray();
    _jsp_string13 = "\n</body></html>\n".toCharArray();
    _jsp_string4 = "</b>\n".toCharArray();
    _jsp_string1 = "\n\n".toCharArray();
    _jsp_string11 = "\n\n<br><br><b> IP.getDecryptParameter().toString() </b>\n".toCharArray();
    _jsp_string0 = "\n\n\n\n\n".toCharArray();
    _jsp_string6 = "\n<br>\n<p><b>\uc544\ub798\uc758 \ub0b4\uc6a9\uc740 INIpluginData\uc785\ub2c8\ub2e4.</b>\n<br>[".toCharArray();
    _jsp_string2 = "\n\n<html>\n<head>\n	<title>Crypto Test Result</title>	\n	<script language=\"javascript\" src=\"/initech/plugin/INIplugin.js\"></script>\n</head>\n\n<body>\n".toCharArray();
    _jsp_string7 = "]<br>\n\n<p><b>\uc544\ub798\uc758 \ub0b4\uc6a9\uc740 INIplugin SDK\uac00 \uc0ac\uc6a9\ud558\ub294 \ud658\uacbd\ubcc0\uc218\ub97c \uc77d\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4.</b>\n<br>m_IP.getProperty(\"DataEncryptAlg\") = ".toCharArray();
    _jsp_string9 = "\n<br>m_IP.getProperty(\"TimeDifference\") = ".toCharArray();
    _jsp_string10 = "\n\n<br><br><b> m_IP.getParameterNames\ub85c \ubcf5\ud638\ud654 \ud55c \uac12\uc785\ub2c8\ub2e4.</b>\n".toCharArray();
  }
}
