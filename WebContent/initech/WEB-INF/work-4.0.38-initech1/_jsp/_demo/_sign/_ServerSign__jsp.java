/*
 * JSP generated by Resin Professional 4.0.38 (built Tue, 17 Dec 2013 09:49:45 PST)
 */

package _jsp._demo._sign;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.io.*;
import java.util.*;
import java.text.*;
import java.net.*;
import java.net.URLDecoder;
import java.security.cert.X509Certificate;
import com.initech.iniplugin.*;
import com.initech.inisafesign.*;
import com.initech.inisafesign.exception.*;
import com.initech.util.Base64Util;

public class _ServerSign__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html;charset=euc-kr");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    

  String orgData = "";
	String regDate = "";
	String dateTime = "";
	String DATEFORMATData = "yyyyMMddHHmmssSSS";
	String m_IniErrCode = null;
	String m_IniErrMsg =null;
	
	
  String publicKeyPath =  "C:/WAS/initech/iniplugin/keys/initech_cert.der";
  String privateKeyPath = "C:/WAS/initech/iniplugin/keys/initech_priv.pk8.der.enc";
  String privateKeyPw = "initechtest"; 

   String plainData ="12322qwertyuio!@#$%^&*()_+~\uc774\ub2c8\ud14d";
  try {
    // INISAFE Sign \ucd08\uae30\ud654
	  INISAFESign signer =  new INISAFESign("C:/WAS/initech/iniplugin/properties/INISAFESign.properties");

	  //Server\uc5d0\uc11c \uc804\uc790\uc11c\uba85 \ub370\uc774\ud130 \uc0dd\uc131
	  //\ud504\ub85c\ud37c\ud2f0\uc5d0\uc11c \uc11c\ubc84 \uc778\uc99d\uc11c\ub97c \uc77d\uc5b4\uc634
	  byte[] signedData = signer.sign(plainData.getBytes());
    //byte[] signedData = signer.sign(publicKeyPath, privateKeyPath, privateKeyPw, plainData.getBytes());



    signer.setSignedData(signedData);
	
	  //\uac80\uc99d(\uc778\uc99d\uc11c \uac80\uc99d, \uc11c\uba85 \uac80\uc99d);
    //signer.verify(); 
      
	  //##### Step 2. \uc804\uc790\uc11c\uba85(#PKCS7) \uac80\uc99d  ####
	  boolean result = signer.verifyPKCS7();
	 
	  if (result) {
    	out.println("<font size=2 color=000099><br><b>PKCS7 \uac80\uc99d\uc774 \uc815\uc0c1\uc801\uc73c\ub85c \uc774\ub8e8\uc5b4 \uc84c\uc2b5\ub2c8\ub2e4.</b></font><br>");	
    	
    } else {
    	// \uc11c\uba85 \ub370\uc774\ud0c0 \uac80\uc99d \uc2e4\ud328 
    	out.println("<font size=2 color=000099><br><b>\uc11c\uba85 \ub370\uc774\ud0c0 \uac80\uc99d \uc2e4\ud328 </b></font><br>");
    }
    
    //##### Step 3. \uc778\uc99d\uc11c \uac80\uc99d  ####
    
/*    if (signer.verifyCertificatePath()) {
    //	 \uc778\uc99d\uc11c  \uac80\uc99d \uc131\uacf5
    	out.println("<font size=2 color=000099><br><b>\uc778\uc99d\uc11c \uac80\uc99d\uc774 \uc815\uc0c1\uc801\uc73c\ub85c \uc774\ub8e8\uc5b4 \uc84c\uc2b5\ub2c8\ub2e4.</b></font><br>");
    } else {
    	//\uc778\uc99d\uc11c  \uac80\uc99d \uc2e4\ud328 
    	out.println("<font size=2 color=000099><br><b>\uc778\uc99d\uc11c \uac80\uc99d \uc2e4\ud328 </b></font><br>");
    }
  */  
      // \uc6d0\ubcf8\ub370\uc774\ud130
	  orgData = signer.getData();
	  
    out.println("<br>SignedData OrgData : "+ new String(orgData));
    
	  // \uc11c\uba85 \ub0a0\uc9dc
	  regDate = signer.getSigningTime();
	  dateTime = com.initech.inisafesign.util.SignUtil.getLocalDateTime(DATEFORMATData);

	  out.println("<br>SignedData regDate: "+ regDate);
	  out.println("<br>SignedData dateTime: " + dateTime);
   
      //(PKCS7 \uc11c\uba85\ub370\uc774\ud130\uc5d0\uc11c \uc778\uc99d\uc11c\ub97c \ucd94\ucd9c, \uc778\uc99d\uc11c\uc758 \uc815\ucc45 OID\ub97c \uac00\uc9c0\uace0 \uc634
      X509Certificate cert = signer.getCertificate();
      
      out.println("X509Certificate IssuerDN =" + cert.getIssuerDN().toString()+"<br>");
      out.println("X509Certificate SubjectDN =" + cert.getSubjectDN().toString()+"<br>");
      out.println("X509Certificate SerialNumber =" + cert.getSerialNumber()+"<br>");
      out.println("X509Certificate getNotBefore =" + cert.getNotBefore()+"<br>");
      out.println("X509Certificate getNotAfter =" + cert.getNotAfter()+"<br>");
     
	}catch(ClientSignException e) {
	  m_IniErrCode = "SIGN_001";
	  m_IniErrMsg  = "Exception : " + e.getMessage(); 
		
	} catch(SignPKCS7Exception e) {
		m_IniErrCode = "SIGN_002";
	  m_IniErrMsg  = "Exception : " + e.getMessage(); 
	  
	} catch(SignCertificateException e) {
		m_IniErrCode = "SIGN_003";
	  m_IniErrMsg  = "Exception : " + e.getMessage(); 
	  
	} catch(INISAFESignException e) {
		m_IniErrCode = "SIGN_004";
	  m_IniErrMsg  = "Exception : " + e.getMessage(); 
	  
	} catch(Exception e) {
		m_IniErrCode = "SIGN_999";
	  m_IniErrMsg  = "Exception : " + e.getMessage();
	}
	
	if(m_IniErrCode != null){
		out.println("<br><b>INISAFE Sign \uac80\uc99d ERROR</b>");
		out.println("<hr>");
		out.println("<br><b>Error Code</b> = <font color='red'>" + m_IniErrCode + "</font>");
		out.println("<br><b>Error Message</b> = " + m_IniErrMsg);
		//return;
		
	}


    out.write(_jsp_string1, 0, _jsp_string1.length);
  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != -1257324557874484737L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("demo/sign/ServerSign.jsp"), 7208361062897857675L, true);
    _caucho_depends.add(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string0;
  private final static char []_jsp_string1;
  static {
    _jsp_string0 = "\n\n\n\n\n\n\n\n\n<!--  \uc774\ub2c8\ud14d \uad00\ub828 -->\n\n\n\n\n\n\n\n<head><title>Server Sign TEST</title>\n</head>\n<body>\n<center>\n<h3>---------- Server \ub300 Server \uc804\uc790\uc11c\uba85 \ud14c\uc2a4\ud2b8 -------------</h3><p><br>\n</center>\n\n".toCharArray();
    _jsp_string1 = "  \n\n<p> \n<center><input type=button value=\"\ub418\ub3cc\uc544\uac00\uae30\" onClick=\"history.back();\">\n</center>\n<hr size=\"1\" width=\"550\" color=\"#CCCCCC\"></p>\n<p align=\"center\"><font size=\"2\">Copyright(c) 1997-2008 by INITECH Bank</font><br></p>\n</body>\n</html>\n".toCharArray();
  }
}
