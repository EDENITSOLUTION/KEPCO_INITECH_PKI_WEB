/*
 * JSP generated by Resin Professional 4.0.38 (built Tue, 17 Dec 2013 09:49:45 PST)
 */

package _jsp._certcenter64._inica70;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.io.*;
import java.sql.*;
import java.util.*;

public class _ini_0cert_0valid__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;






          

  //*********************************************************
  // getConnection
  //*********************************************************
  public Connection getConnection()
  {
  		Connection conn = null;
  		
  		
  			
  	  
  		try
  		{
  			Properties props = new Properties();
  			props.put("connection.driver", "oracle.jdbc.driver.OracleDriver");
  			props.put("connection.url", "jdbc:oracle:thin:@10.180.2.67:1521:INICA");
  			props.put("user", "ra");
  			props.put("password", "kepcora");
  	
  			Class.forName(props.getProperty("connection.driver"));
  	    conn = DriverManager.getConnection(props.getProperty("connection.url"), props);		  
  	  }catch(Exception e){
  	  	e.printStackTrace();
  	  }

  	  
      return conn;
  }



  public String closeDB(ResultSet rs, Statement stmt, Connection conn, Statement stmtCount)
  {
      String result = "";
      try{
        if(rs!=null)
  	      rs.close();
  	      result +=" rs close ok";
  	  }catch(Exception e1){
  	    e1.printStackTrace();
  	  }
  	  
  	  try{
  	    if(stmt!=null)
  	    stmt.close();
  	    result +=" stmt close ok";
  	  }catch(Exception e1){
  	    e1.printStackTrace();
  	  }

  	  try{
  	    if(stmtCount!=null)
  	      stmtCount.close();
  	    result +=" stmtCount close ok";
  	  }catch(Exception e1){
  	    e1.printStackTrace();
  	  }
  	  
  	  
  	  
  	  
  	   try{
  	   
  	    if(conn!=null)
  	    conn.close();
  	    result +=" conn close ok";
  	  }catch(Exception e1){
  	    e1.printStackTrace();
  	  }	  
  	  
      return result;
  }


  public String do_protocol_error()
  {
    StringBuffer buffer = new StringBuffer();
    
      	buffer.append("<result_code>1</result_code>");   
      	buffer.append("<result_msg>inavlid protocol</result_msg>");
  	    buffer.append("</response>");   
  	    
  	return buffer.toString();    

  }


  public String nullConvefrt(String str)
  {
  	if (str == null) {
  		return "";
  	} else if ("".equals(str.trim())) {
  		return "";
  	}

  	return str;
  }







  public String do_op_cert_info_list(String uid, String certSN) {

  	Connection conn = null;
  	ResultSet rs    = null;
  	String  rs1 = "";
  	String rs2 = "";
  	String rs4 = "";
  	String rs5 = "";
  	String rs6 = "";
  	String rs7 = "";
  	String rs8 = "";
  	String rs9 = "";
  	String rs15 = "";

  	StringBuffer buffer = new StringBuffer();

  	
  	try{
        
  		conn = getConnection();
  		conn.setAutoCommit(false);		
  		Statement stmt = conn.createStatement();   


  	
  		//-------------------------------------------
  		// Query section
  		//-------------------------------------------    
  		String queary = "SELECT to_char(to_number(serial)) as serial, status  FROM ldap_info WHERE userid = '"+uid+"'";
  		rs = stmt.executeQuery(queary);
      	
      	int i = 0;
      	while(rs.next())     	{
  	    	
  		  	  rs1 = rs.getString(1);			// CERTSERIAL
  		  	  rs2 = rs.getString(2);			// CERTSTAT
  		  	  
  		  	  //for debug 
  		  	  //buffer.append("<record>");
  		  	  //buffer.append("<index>" + i + "</index>");
  		  	  //buffer.append("<cert_serial>" + rs1 + "</cert_serial>");
  			  //buffer.append("<cert_stat>" + rs2 + "</cert_stat>");
  		  	  //buffer.append("</record>");
  		  	
  				i++;
      	}
      	
  	
  		if( rs1.equalsIgnoreCase(certSN)==true){

  			if(rs2.equalsIgnoreCase("V")==true)
  				buffer.append("RESULT=000");
  			else
  				buffer.append("RESULT=999");
  			
  		}else{
  	 	//debug	
  		//buffer.append(queary+uid+certSN+" RESULT=997 "+rs1);
  			buffer.append("RESULT=999");
  	}
      	

  		
    } catch (Exception e) {
      	e.printStackTrace();
  	buffer.append("RESULT=998");
    }finally{
  	   try{
  	    conn.close();
  	  }catch(Exception e){
  	    e.printStackTrace();
  	  }
    }
  	
  	return buffer.toString();
  }




  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html; charset=utf-8");

    out.write(_jsp_string0, 0, _jsp_string0.length);
     response.setContentType("text/xml; charset=UTF-8"); 
    out.write(_jsp_string1, 0, _jsp_string1.length);
     request.setCharacterEncoding("UTF-8"); 
    out.write(_jsp_string1, 0, _jsp_string1.length);
       	
  
  String resultString="";
 
  try{

       String uid = request.getParameter("UID");
       String sn = request.getParameter("SN");


	if(uid==null|| uid.equalsIgnoreCase("")==true){
		out.println("RESULT=990");
		return;
        }


        if(sn==null|| sn.equalsIgnoreCase("")==true){
                out.println("RESULT=991");
                return;
        }

       resultString = do_op_cert_info_list(uid, sn);

        
       out.println(resultString);
   
   
   }catch(Exception e){
    resultString = do_protocol_error();
    out.println(resultString);
    return;
   }


    out.write(_jsp_string1, 0, _jsp_string1.length);
  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != -1257324557874484737L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("certcenter64/inica70/ini_cert_valid.jsp"), -1465912286998805785L, true);
    _caucho_depends.add(depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("certcenter64/inica70/ini_cert_valid_func.jsp"), 6777559321296475379L, true);
    _caucho_depends.add(depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("certcenter64/inica70/import/func.jsp"), -134361262012752146L, true);
    _caucho_depends.add(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string0;
  private final static char []_jsp_string1;
  static {
    _jsp_string0 = " \r\n\r\n \r\n \r\n\n \n \n\n \n \n	\n \n	\n \r\n".toCharArray();
    _jsp_string1 = "\r\n".toCharArray();
  }
}
