/*
 * JSP generated by Resin Professional 4.0.38 (built Tue, 17 Dec 2013 09:49:45 PST)
 */

package _jsp._certcenter64._inica70;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.io.*;
import java.util.*;
import java.lang.*;
import java.text.*;
import java.security.cert.X509Certificate;
import java.security.cert.CertificateFactory;
import com.initech.iniplugin.*;
import com.initech.util.*;

public class _login__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;


  	/** PEM \ud0c0\uc785\uc758 \uc778\uc99d\uc11c \ud5e4\ub354 */
  	public static final String PEM_BEGIN_STR = "-----BEGIN CERTIFICATE-----\n";
  	/** PEM \ud0c0\uc785\uc758 \uc778\uc99d\uc11c \ud14c\uc77c */
  	public static final String PEM_END_STR = "-----END CERTIFICATE-----";

  	// PEM\ud615\uc2dd\uc5d0\uc11c x509\ub85c~~~

  	public X509Certificate parseX509Cert(String certStr) throws Exception
  	{
  		String str = null;
  		X509Certificate x509Cert = null;
  		ByteArrayInputStream baIn = null;
  		CertificateFactory certFactory = null;

  		try
  		{
  			baIn = new ByteArrayInputStream(certStr.getBytes());
  			certFactory = getCertificateFactory();
  			x509Cert = (X509Certificate) certFactory.generateCertificate(baIn);
  		}
  		catch (Exception e)
  		{
  			throw new Exception(e.getMessage());
  		}
  		finally
  		{
  			try
  			{
  				baIn.close();
  			}
  			catch (Exception e) {}
  		}

  		return x509Cert;
  	}

  	public CertificateFactory getCertificateFactory() throws Exception
  	{
  		CertificateFactory certFactory = null;
  		certFactory = CertificateFactory.getInstance("X.509", AutoProvider.providerName);
  		return certFactory;
  	}

  	// x509 \uc5d0\uc11c pem \ud615\uc2dd\uc73c\ub85c~~
  	public static String x509CertificateToPem(X509Certificate cert) throws Exception
  	{
  		byte[] asn1encoded = null;
  		byte[] base64encoded = null;
  		String certStr = null;
  		try
  		{
  			asn1encoded = cert.getEncoded();
  			base64encoded = Base64Util.encode(asn1encoded);
  			certStr = PEM_BEGIN_STR + new String(base64encoded) + PEM_END_STR;
  		}
  		catch (Exception e)
  		{
  			throw new Exception(e.getMessage());
  		}

  		return certStr;
  	}
  	

  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html; charset=EUC-KR");

    out.write(_jsp_string0, 0, _jsp_string0.length);
     
		IniPlugin m_IP = null;
		String pluginConfig  = null;
		String signConfig  = null;
		String oidConfig  = null;
		String crlConfig  = null;
		String certConfig  = null;
		String certverifierConfig = null;
		String netConfig = null;
		String inimasConfig = null;
		
		pluginConfig  = "/home/initech/iniplugin/properties/IniPlugin.inica70.properties";
				
		signConfig  = "/home/unixdev/initech/iniplugin/properties/INISAFESign.properties";
		oidConfig = "/home/unixdev/initech/iniplugin/properties/jCERTOID.properties";
		crlConfig = "/home/unixdev/initech/iniplugin/properties/CRL.properties";
		certConfig = "/home/unixdev/initech/iniplugin/properties/certcenter.properties";
		certverifierConfig = "/home/unixdev/initech/iniplugin/properties/certverifier.properties";
		netConfig = "/home/unixdev/initech/iniplugin/properties/INISAFENet.properties";
		inimasConfig = "/home/unixdev/initech/iniplugin/properties/IniMas.properties";
	
		String iniData = request.getParameter("INIpluginData");
		
		if(iniData != null && !iniData.equals("")){
			
		m_IP = new IniPlugin(request,response,pluginConfig);
		
		try {
			m_IP.init(false);
		} catch(Exception e) {
			e.printStackTrace();
		} 
	}	
		

    out.write(_jsp_string1, 0, _jsp_string1.length);
    
	boolean bEncrypt = false;
	String tmp = m_IP.getParameter("encrypt");
	if ((tmp != null) && tmp.equals("on"))
	{
		bEncrypt = true;
	}

	// \uc778\uc99d\uc774 \ud544\uc694\ud55c \ud398\uc774\uc9c0 \uc778\uc9c0 \uccb4\ud06c \ubc0f \uc778\uc99d\uc11c \uc815\ubcf4\ubcf4\uae30
	String strClientAuth = null;
	String certInfo = "";
	String subjectDN = "";
	String IssuerDN = "";
	String userCertString = null;
	String x509String = null;
	String pemtype = null;
	String x509String_1 = null;

	if (m_IP.isClientAuth() == false)
	{
		strClientAuth = "\uc0ac\uc6a9\uc790(Client) \uc778\uc99d\uc11c\uac00 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.";
	}
	else
	{
		try
		{
			strClientAuth = "\uc0ac\uc6a9\uc790(Client) \uc778\uc99d\uc11c\uc758 \uc815\ubcf4\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.";

			X509Certificate userCert_a = m_IP.getClientCertificate();

			userCertString = m_IP.getClientCertificate2();  // \uc778\uc99d\uc11c PEM\ud615\ud0dc\ub85c \ubf51\uae30
			System.out.println(userCertString);

			X509Certificate userCert = parseX509Cert(userCertString);	// PEM\ud615\uc2dd\uc758 \uc778\uc99d\uc11c\ub97c x509 \ud615\ud0dc\ub85c

			x509String = userCert.toString();
			System.out.println(x509String);

			pemtype = x509CertificateToPem(userCert);
			System.out.println(pemtype);

			userCert = parseX509Cert(pemtype);
			x509String = userCert.toString();
			System.out.println(x509String);

			subjectDN = userCert.getSubjectDN().toString();

			int certGubun = 0;	// \uc778\uc99d\uc11c \uad6c\ubd84 : \uc0ac\uc124(0), \uae08\uacb0\uc6d0(1), \ud0c0\uae30\uad00OCSP(2>=)

			DateFormat myDate = new SimpleDateFormat("yyyy-MM-dd hh:mm ss");
			Date NotBefore = userCert.getNotBefore();	// \uc778\uc99d\uc11c \ubc1c\uae09\uc77c
			Date NotAfter = userCert.getNotAfter();		// \uc778\uc99d\uc11c \ub9cc\uae30\uc77c
			Date currentTime = new Date();				// \ud604\uc7ac \uc2dc\uac04
			int date = (int) ((NotAfter.getTime() - currentTime.getTime()) / (24 * 60 * 60 * 1000));

			certInfo += "<br>\ubc1c\uae09\uc790[<b>" + userCert.getIssuerDN().toString() + "</b>]";
			certInfo += "<br>\ubc1c\uae09\ub300\uc0c1[<b>" + userCert.getSubjectDN().toString() + "</b>]";
			certInfo += "<br>\ubc1c\uae09\uc77c[<b>" + myDate.format(NotBefore) + "</b>]";
			certInfo += "&nbsp;&nbsp;&nbsp;\ub9cc\ub8cc\uc77c[<b>" + myDate.format(NotAfter) + "</b>]";
			certInfo += "&nbsp;&nbsp;&nbsp;Serial[<b>" + userCert.getSerialNumber().toString() + "</b>]";
			certInfo += "&nbsp;&nbsp;&nbsp;Serial(10\uc9c4\uc218)[<b>" + userCert.getSerialNumber().toString(10) + "</b>]";
			certInfo += "&nbsp;&nbsp;&nbsp;Serial(16\uc9c4\uc218)[<b>" + userCert.getSerialNumber().toString(16) + "</b>]";
			certInfo += "<br>\ubc1c\uae09\uacf5\uc778\uc778\uc99d\uae30\uad00\uc740 <b>";

			IssuerDN = userCert.getIssuerDN().toString().toUpperCase();
			out.println("<Br><Br>IssuerDN ==> " + IssuerDN);
			if (IssuerDN.indexOf("O=\uc0ac\uc124") > -1)							certGubun = 0;	// \uc0ac\uc124
			else if (IssuerDN.indexOf("O=yessign".toUpperCase()) >- 1)		certGubun = 1;	// \uae08\uacb0\uc6d0\uacf5\uc778
			else if (IssuerDN.indexOf("O=SignKorea".toUpperCase()) >- 1)	certGubun = 2;	// \uc99d\uad8c\uc804\uc0b0
			else if (IssuerDN.indexOf("O=NCASign".toUpperCase()) >- 1)		certGubun = 3;	// \uc804\uc0b0\uc6d0
			else if (IssuerDN.indexOf("O=TradeSign".toUpperCase()) >- 1)	certGubun = 4;	// \ubb34\uc5ed\uc815\ubcf4\ud1b5\uc2e0
			else if (IssuerDN.indexOf("O=CrossCert".toUpperCase()) >- 1)	certGubun = 5;	// \uc804\uc790\uc778\uc99d
			else if (IssuerDN.indexOf("O=KICA".toUpperCase()) >- 1)			certGubun = 6;	// \uc815\ubcf4\uc778\uc99d
			else															certGubun = 10;	// \uae30\ud0c0\uacf5\uc778

			if (certGubun == 0)			certInfo += "\uc0ac\uc124";
			else if (certGubun == 1)	certInfo += "\uae08\uacb0\uc6d0";
			else if (certGubun == 2)	certInfo += "\uc99d\uad8c\uc804\uc0b0";
			else if (certGubun == 3)	certInfo += "\uc804\uc0b0\uc6d0";
			else if (certGubun == 4)	certInfo += "\ubb34\uc5ed\uc815\ubcf4\ud1b5\uc2e0";
			else if (certGubun == 5)	certInfo += "\uc804\uc790\uc778\uc99d";
			else if (certGubun == 6)	certInfo += "\uc815\ubcf4\uc778\uc99d";
			else						certInfo += "\uae30\ud0c0\uacf5\uc778";

			certInfo += "</b>\uc774\uba70 \uace0\uac1d\ub2d8\uc758 \uc778\uc99d\uc11c\ub294 ";
			certInfo += date;
			certInfo += "\uc77c \ud6c4\uc5d0 \ub9cc\ub8cc\uac00 \ub429\ub2c8\ub2e4.";
		}
		catch (Exception eee)
		{
			out.println("<br><b>(?)Certificate Info() ERR</b>");
			out.println("<br>FileName = CryptoTest.jsp");
			out.println("<br>Exception = " + eee.getMessage());
			out.println("<br><br><b>printStackTrace</b><br>");
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			eee.printStackTrace(pw);
			out.println(sw.toString());
			return;
		}
	}

    out.write(_jsp_string2, 0, _jsp_string2.length);
    out.print((subjectDN));
    out.write(_jsp_string3, 0, _jsp_string3.length);
    out.print((strClientAuth));
    out.write(_jsp_string4, 0, _jsp_string4.length);
    out.print((certInfo));
    out.write(_jsp_string5, 0, _jsp_string5.length);
    out.print((request.getRemoteAddr()));
    out.write(_jsp_string6, 0, _jsp_string6.length);
    out.print((request.getMethod()));
    out.write(_jsp_string7, 0, _jsp_string7.length);
    out.print((request.getHeader("User-Agent")));
    out.write(_jsp_string8, 0, _jsp_string8.length);
    
	if (bEncrypt)
	{
		out = m_IP.endEncrypt(out);
	}

    out.write(_jsp_string9, 0, _jsp_string9.length);
  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != -1257324557874484737L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("certcenter64/inica70/login.jsp"), -551365087498923431L, true);
    _caucho_depends.add(depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("certcenter64/inica70/config.jsp"), -7285903633904238357L, true);
    _caucho_depends.add(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string7;
  private final static char []_jsp_string3;
  private final static char []_jsp_string2;
  private final static char []_jsp_string1;
  private final static char []_jsp_string6;
  private final static char []_jsp_string0;
  private final static char []_jsp_string4;
  private final static char []_jsp_string8;
  private final static char []_jsp_string5;
  private final static char []_jsp_string9;
  static {
    _jsp_string7 = "</b>]\n<br>User-Agent[<b>".toCharArray();
    _jsp_string3 = "';\n			var data = \"aaaa\";\n			FilterUserCert(\"\", filter);\n			if (PKCS7SignedData(form, data, false) == true)\n			{\n				// \uc554\ud638\ud654 \uc218\ud589 (\ubcc0\uacbd\uc0ac\ud56d : EncFormVerify -> EncForm)\n				if (EncForm(form) == true)\n				{\n					return true;\n				}\n				else\n				{\n					alert(\"\uc554\ud638\ud654\uc5d0 \uc2e4\ud328\ud588\uc2b5\ub2c8\ub2e4.\");\n					return false;\n				}\n			}\n			else\n			{\n				alert(\"\uc804\uc790\uc11c\uba85\uc5d0 \uc2e4\ud328\ud588\uc2b5\ub2c8\ub2e4.\");\n				return false;\n			}\n\n			return false;\n		}\n	</script>\n</head>\n\n<body bgcolor=\"#ffffff\" text=\"#000000\" style=\"font-size:9pt;\">\n\n<table width=\"800\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\" >\n	<tr>\n		<td bgcolor=\"#828DA6\">\n			<font color=\"#ffffff\" face=\"arial,helvetica,sanserif\">\n		</td>\n	</tr>\n</table>\n\n<table width=\"800\">\n<br><b>".toCharArray();
    _jsp_string2 = "\n\n\n\n\n<html>\n<head>\n	<title>INISAFE Web Plugin - SDKex02 Result</title>\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=euc-kr\">\n	<script language=\"javascript\" src=\"/initech/plugin/INIplugin.js\"></script>\n	<script language=\"javascript\">\n		function SecureSubmit(form)\n		{\n			alert(\"1\");\n			InitCache();\n			var filter = \"SubjectDN=\" + '".toCharArray();
    _jsp_string1 = "\n\n\n".toCharArray();
    _jsp_string6 = "</b>]\n&nbsp;&nbsp;getMethod[<b>".toCharArray();
    _jsp_string0 = "\n\n\n\n\n\n\n\n\n".toCharArray();
    _jsp_string4 = "</b>\n".toCharArray();
    _jsp_string8 = "</b>]\n<br>\n".toCharArray();
    _jsp_string5 = "\n<br>\n<br><b>\uc811\uc18d Client \ube0c\ub77c\uc6b0\uc838 \uc815\ubcf4\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.</b>\n<br>getRemoteAddr[<b>".toCharArray();
    _jsp_string9 = "\n\n</body>\n</html>\n".toCharArray();
  }
}
