/*
 * JSP generated by Resin Professional 4.0.38 (built Tue, 17 Dec 2013 09:49:45 PST)
 */

package _jsp._certcenter64._inica70;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.io.*;
import java.util.*;
import java.util.Date.*;
import java.util.Calendar.*;
import java.text.SimpleDateFormat;
import java.lang.*;
import java.lang.String.*;
import java.text.*;
import java.sql.*;
import javax.sql.*;
import javax.naming.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import com.initech.iniplugin.*;

public class _ini_0manage_0user_0writeok__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;


      public static String lpad(String str, int len, String addStr) {
           String result = str;
           if (result == null) return result;
           int templen   = len - result.length();

          for (int i = 0; i < templen; i++){
                 result = addStr + result;
           }
           
           return result;
       }







          

  //*********************************************************
  // getConnection
  //*********************************************************
  public Connection getConnection()
  {
  		Connection conn = null;
  		
  		
  			
  	  
  		try
  		{
  			Properties props = new Properties();
  			props.put("connection.driver", "oracle.jdbc.driver.OracleDriver");
  			props.put("connection.url", "jdbc:oracle:thin:@10.180.2.67:1521:INICA");
  			props.put("user", "ra");
  			props.put("password", "kepcora");
  	
  			Class.forName(props.getProperty("connection.driver"));
  	    conn = DriverManager.getConnection(props.getProperty("connection.url"), props);		  
  	  }catch(Exception e){
  	  	e.printStackTrace();
  	  }

  	  
      return conn;
  }



  public String closeDB(ResultSet rs, Statement stmt, Connection conn, Statement stmtCount)
  {
      String result = "";
      try{
        if(rs!=null)
  	      rs.close();
  	      result +=" rs close ok";
  	  }catch(Exception e1){
  	    e1.printStackTrace();
  	  }
  	  
  	  try{
  	    if(stmt!=null)
  	    stmt.close();
  	    result +=" stmt close ok";
  	  }catch(Exception e1){
  	    e1.printStackTrace();
  	  }

  	  try{
  	    if(stmtCount!=null)
  	      stmtCount.close();
  	    result +=" stmtCount close ok";
  	  }catch(Exception e1){
  	    e1.printStackTrace();
  	  }
  	  
  	  
  	  
  	  
  	   try{
  	   
  	    if(conn!=null)
  	    conn.close();
  	    result +=" conn close ok";
  	  }catch(Exception e1){
  	    e1.printStackTrace();
  	  }	  
  	  
      return result;
  }


  public String do_protocol_error()
  {
    StringBuffer buffer = new StringBuffer();
    
      	buffer.append("<result_code>1</result_code>");   
      	buffer.append("<result_msg>inavlid protocol</result_msg>");
  	    buffer.append("</response>");   
  	    
  	return buffer.toString();    

  }


  public String nullConvefrt(String str)
  {
  	if (str == null) {
  		return "";
  	} else if ("".equals(str.trim())) {
  		return "";
  	}

  	return str;
  }



  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html;charset=EUC-KR");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    
//2014.04.22 com.initech.IniRA.* \uc81c\uac70
//--@ page import="com.initech.IniRA.*" 

boolean is_smsChk = true;

String pwdSynURL = "http://mail.kepco.co.kr/Synk/Password.ashx";
String pwdSyncKey = "5ac1bb6d4172409089a7df3aa6ec91c2";
String pwdSyncDidx = "1";



boolean m_bDebug = true;
String m_How = null;

String m_IniErrCode = null;
String m_IniErrMsg = null;
IniPlugin m_IP = new IniPlugin(request, response, "/home/initech/iniplugin/properties/IniPlugin.inica70.properties");

//************************************************
//      Post Data \ud655\uc778
//************************************************
String INIdata = request.getParameter("INIpluginData");
if (INIdata == null)
{
	m_IniErrCode = "iniPlugin_101";
	m_IniErrMsg = "Exception : INIpluginData is null";
	System.out.println(m_IniErrMsg);
	//IniDebug.request(request);
}

if (m_IniErrCode == null) 
{
	try {
		m_IP.init();
	} catch(PrivateKeyDecryptException e) {
		m_IniErrCode = "PLUGIN_001";
		m_IniErrMsg = "Exception : " + e.getMessage();

	} catch(CRLFileNotFoundException e) {
		m_IniErrCode = "PLUGIN_002";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(PropertyFileNotFoundException e) {
		m_IniErrCode = "PLUGIN_003";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(PrivateKeyFileNotFoundException e) {
		m_IniErrCode = "PLUGIN_004";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(CACertFileNotFoundException e) {
		m_IniErrCode = "PLUGIN_005";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(INIpluginDataAbnormalFormatException e) {
		m_IniErrCode = "PLUGIN_006";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(LongParseException e) {
		m_IniErrCode = "PLUGIN_007";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(PrivateKeyParseException e) {
		m_IniErrCode = "PLUGIN_008";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(CRLFileParseException e) {
		m_IniErrCode = "PLUGIN_009";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(CACertFileParseException e) {
		m_IniErrCode = "PLUGIN_010";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(ClientCertParseException e) {
		m_IniErrCode = "PLUGIN_011";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(AbnormalPropertyFileException e) {
		m_IniErrCode = "PLUGIN_012";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(PropertyNotFoundException e) {
		m_IniErrCode = "PLUGIN_013";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(VerifyDataDecryptException e) {
		m_IniErrCode = "PLUGIN_014";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(AbnormalVerifyDataException e) {
		m_IniErrCode = "PLUGIN_015";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(ExpiredVerifyDataException e) {
		m_IniErrCode = "PLUGIN_016";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(ClientCertValidityException e) {
		m_IniErrCode = "PLUGIN_017";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(SignatureVerifyException e) {
		m_IniErrCode = "PLUGIN_018";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(ClientCertRevokedException e) {
		m_IniErrCode = "PLUGIN_019";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(SessionKeyException e) {
		m_IniErrCode = "PLUGIN_020";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(EncryptDataException e) {
		m_IniErrCode = "PLUGIN_021";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(DecryptDataException e) {
		m_IniErrCode = "PLUGIN_022";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(CRLFileIOException e) {
		m_IniErrCode = "PLUGIN_023";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(PropertyFileIOException e) {
		m_IniErrCode = "PLUGIN_024";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(PrivateKeyFileIOException e) {
		m_IniErrCode = "PLUGIN_025";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(CACertFileIOException e) {
		m_IniErrCode = "PLUGIN_026";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(PropertyFileParseException e) {
		m_IniErrCode = "PLUGIN_027";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(VerifyFlagException e) {
		m_IniErrCode = "PLUGIN_028";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(IOException e) {
		m_IniErrCode = "PLUGIN_029";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(SignDataException e) {
		m_IniErrCode = "PLUGIN_030";
		m_IniErrMsg = "Exception : " + e.getMessage();
	} catch(Exception e) {
		m_IniErrCode = "PLUGIN_099";
		m_IniErrMsg = "Exception : " + e.getMessage();
		e.printStackTrace();
	}

	//if (m_IniErrCode != null) IniDebug.request(request);
}

    out.write(_jsp_string1, 0, _jsp_string1.length);
    
//************************************************
//      \ubcc0\uc218 \uc120\uc5b8 \ubc0f \uc785\ub825\uc815\ubcf4 \ubcf5\ud638\ud654
//************************************************
	
response.setHeader("Cache-Control", "no-cache, post-check=0, pre-check=0");
response.setHeader("Pragma", "no-cache");
response.setHeader("Expires", "0");



//2014.04.22 \ub77c\uc774\uc13c\uc2a4\uacbd\ub85c \uc81c\uac70
//String licensePath = "/home/initech/iniplugin/license/IniRA_v6_sdk.lic";
//IniRAutil m_RA = new IniRAutil( licensePath );




//\uc554\ud638\ud654\uc5ec\ubd80 : \ub9ac\uc5bc\uc801\uc6a9\uc2dc \ubc18\ub4dc\uc2dctrue\ub85c \ubcc0\uacbd\ud574\uc57c\ud568..
boolean m_bEncrypt = true;

//\uc0ac\uc6a9\uc790\uc815\ubcf4\ub97c \uc778\uc0ac\uc815\ubcf4\uc5d0\uc11c \uac00\uc9c0\uace0 \uc640\uc11c
//\ud574\ub2f9 \uc0ac\uc6a9\uc790\ub9cc \uc778\uc99d\uc11c \ubc1c\uae09 \ubc1b\uac8c \ud560\uc9c0 \uccb4\ud06c
// false : \uc778\uc0ac\uc815\ubcf4\uc678 \uc785\ub825\ud55c \uc784\uc758\uc758 \uc544\uc774\ub514\ub85c\ub3c4 \ubc1c\uae09\uac00\ub2a5
//\ub9ac\uc5bc\uc801\uc6a9\uc2dc \ubc18\ub4dc\uc2dctrue\ub85c \ubcc0\uacbd\ud574\uc57c\ud568..
boolean is_insaUser = true;

//String userPwdSendURL = "http://10.


//\uc0ac\uc6a9\uc790 \uc2e0\ubd84\ud655\uc778 \uc815\ubcf4
String m_ID = null;		// form name = id
String m_REGNO = null;	// form name = regno
String m_pw = null; // form name = certpass

//SMS \uc778\uc99d\ucf54\ub4dc
//String m_smschk = null; //\ubc1c\uae09SMS\uc778\uc99d\ucf54\ub4dc
String m_sms = null; //\uc785\ub825SMS\uc778\uc99d\ucf54\ub4dc
String m_tmid = null;//SMS\uc778\uc99d\uc744 \uc704\ud55c \ud0c0\uc784 \uc544\uc774\ub514

//\ubc1c\uae09\uc2dc \uae30\uc874 \uc778\uc99d\uc11c \ud3d0\uae30 \ud6c4 \ub2e4\uc2dc \ubc1c\uae09\ud558\ub294 \ud504\ub85c\uc138\uc2a4 \uc635\uc158
String m_strBrg = null ;



// \uc870\ud68c \uc815\ubcf4 (\uc694\uccad)
String m_SEARCHCODE = null;		// form name = searchcode
String m_SEARCHCONTENTS = null;	// form name = searchcontents

// \uc870\ud68c \uc815\ubcf4 (\uc751\ub2f5)
String m_seCACODE			= null;
String m_seMANAGERID		= null;
String m_seCERTPOLICY		= null;
String m_seCERTSERIAL		= null;
String m_seUSERID			= null;
String m_seSUBJECTDN		= null;
String m_seIDNO				= null;
String m_seSVDATE			= null;
String m_seEVDATE			= null;
String m_seCERTSTATUS		= null;
String m_seTOTALRECORDNUM	= null;
String m_seCURRENTRECORNUM	= null;

//Challenge\uc0ac\uc6a9\uc5ec\ubd80 : \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\uc548\ud568
boolean m_bChallenge = false;

//LDAP \uad00\ub828\uc815\ubcf4 : \ubcc0\uacbd\ud558\uc9c0 \ub9d0\uac83
String m_certserial = null;
String m_ldapchallenge = null;

//\uc778\uc99d\uc11c\uc2e0\uccad\uc815\ubcf4, \ud638\uc2a4\ud2b8\uc5d0\uc11c \ubc1c\uc544\uc57c \ud560\uc815\ubcf4 : \ubcc0\uacbd\ud558\uc9c0 \ub9d0\uac83
String m_REQ = null; //cert request
String m_CN = "\ud64d\uae38\ub3d9";
String m_MAIL = "caadmin@kepco.co.kr";
String m_OU = "\uc815\ubcf4\uae30\uc220\ucc98";	//\uc815\ubcf4\uae30\uc220\ucc98
String m_O = "\ud55c\uad6d\uc804\ub825\uacf5\uc0ac";
String m_L = "\uc11c\uc6b8\ud2b9\ubcc4\uc2dc";
String m_C = "KR";
String m_POLICY = "71"; // 20180718 njjang \ucd94\uac00

//\uc778\uc99d\uc11c \uc2e0\uccad(\ucde8\uc18c) \uc131\uacf5\uc2dc \ubc1b\uc544\uc624\ub294 \uac12\ub4e4 : \ubcc0\uacbd\ud558\uc9c0 \ub9d0\uac83
String m_caSerial = null;
String m_caSeqNo = null;
String m_caIssueDate = null;
String m_caExpireDate = null;
String m_caRevokeDate = null;
String m_caRejectReason = null;

//\ubc1c\uae09(\ud3d0\uae30)\ub41c \uc778\uc99d\uc11c\ub97c PC\uc5d0 \uc800\uc7a5(\uc0ad\uc81c)\ud558\uae30\uc704\ud55c \uc815\ubcf4 : \ubcc0\uacbd\ud558\uc9c0 \ub9d0\uac83
String m_caCertString = null;
String m_orgCertString = null;
String m_caRevokedCertString = null;


if (m_IniErrCode == null) {
	
	try {
		if (m_bDebug) System.out.println("INIplugin (" + m_How + " ) : start ip.init");

		//\uc0ac\uc6a9\uc790 \ud655\uc778 Parameter \uc785\ub825\ud3fc\uc774 \ucd94\uac00\ub418\uba74 \uc5ec\uae30\ub2e4\uac00 \ucd94\uac00\ud558\uba74 \ub428
		m_ID = m_IP.getParameter("id");

		//2014.04.22 \ud55c\uad6d\uc804\ub825\uc740 \uc8fc\ubbfc\ubc88\ud638 \uc785\ub825\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c
		//\uc784\uc758\uc758 \uc8fc\ubbfc\ub4f1\ub85d \ubc88\ud638\ub97c \uc785\ub825\ud558\uac8c \ud55c\ub2e4.
		//m_REGNO = lpad(m_IP.getParameter("regno"),13, "0");
		m_REGNO = "0000000000000";

		//\uc0ac\uc6a9\uc790\ube44\ubc00\ubc88\ud638 \uad00\ub9ac\ub97c \uc704\ud574
		m_pw = m_IP.getParameter("pw");


		//m_smschk = m_IP.getParameter("smschk");
		m_sms = m_IP.getParameter("sms");
		m_tmid = m_IP.getParameter("tmid");

		m_strBrg = m_IP.getParameter("strBrg");

		m_SEARCHCODE = m_IP.getParameter("searchcode");
		m_SEARCHCONTENTS = m_IP.getParameter("searchcontents");
		
		if (m_How.equals("certNew") || m_How.equals("certRenewal") ||
			m_How.equals("certReplace")) {
			m_REQ = m_IP.getParameter("req");
			
			//CN\uac12\uc740 ID\ub85c \ubcc0\uacbd
			//m_CN = m_IP.getParameter("CN");
			m_CN = m_ID ;
			
			m_MAIL = m_IP.getParameter("EMAIL");
			
			//OU\uac12 \ubcc0\uacbd : \uc804\uc790\ud1b5\uc2e0\ucc98
			m_OU = m_IP.getParameter("OU");
			m_OU = "\uc815\ubcf4\uae30\uc220\ucc98"; //\uc815\ubcf4\uae30\uc220\ucc98
			
			//O\uac12 \ubcc0\uacbd : \ud55c\uad6d\uc804\ub825\uacf5\uc0ac
			//m_O = m_IP.getParameter("O");
			m_O = "\ud55c\uad6d\uc804\ub825\uacf5\uc0ac";
			
			
			m_L = m_IP.getParameter("L");

			//C\uac12 \ubcc0\uacbd : KR
			//m_C = m_IP.getParameter("C");
			m_C = "KR";
		}
		
		m_certserial = m_IP.getParameter("serialno");

		if (m_bDebug) {
			System.out.println("\tID : " + m_ID);
			System.out.println("\tREGNO : " + m_REGNO);
//			System.out.println("\tPW : " + m_PW);
			System.out.println("\tCN : " + m_CN);
			System.out.println("\tEMAIL : " + m_MAIL);
			System.out.println("\tSERIAL : " + m_certserial);			
			System.out.println("\tSEARCHCODE     : " + m_SEARCHCODE);			
			System.out.println("\tSEARCHCONTENTS : " + m_SEARCHCONTENTS);			
		}
		if (m_bDebug) System.out.println(m_ID + "( " + m_How + " ) : end ip.init");
	} catch(Exception e){
		m_IniErrCode = "iniPlugin_102";
		System.out.println(m_ID + " : Exception : " + e.getMessage());
		e.printStackTrace();
	}
}

    out.write(_jsp_string2, 0, _jsp_string2.length);
    
//************************************************
//      \uad00\ub9ac\uc790 \uc138\uc158 \uccb4\ud06c
//************************************************
String adminLogin = (String)session.getAttribute("adminLogin");
if (adminLogin == null) {
	response.setCharacterEncoding("EUC-KR");
	PrintWriter writer = response.getWriter();
	writer.println("<script type='text/javascript'>");
	writer.println("alert('\uad00\ub9ac\uc790 \ub85c\uadf8\uc778 \uc815\ubcf4\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.');");
	writer.println("location.href='ini_manage_cert_login.jsp'");
	writer.println("</script>");
	writer.flush();
	return;
}

String command = m_IP.getParameter("command");
String queryString = m_IP.getParameter("queryString");
String userId = m_IP.getParameter("userId");
String gubun = m_IP.getParameter("gubun");
String REPLACE_CELLNO = m_IP.getParameter("REPLACE_CELLNO");
if (REPLACE_CELLNO == null || "".equals(REPLACE_CELLNO)) {
	REPLACE_CELLNO = "";
}


Context ict = new InitialContext();
DataSource ds = (DataSource) ict.lookup("java:comp/env/jdbc/INICA");
ResultSet rs = null;

Connection conn = null;
Statement stmt = null;

try {
	conn = ds.getConnection();
	stmt = conn.createStatement();

	String q = "";

	if ("update".equals(command)) {

		q = "";
		q += "	UPDATE  MNG_USER";
		q += "	   SET  REPLACE_CELLNO = '"+REPLACE_CELLNO+"'";
		q += "	 WHERE	USERID = '"+userId+"'";
		rs = stmt.executeQuery(q);

		response.setCharacterEncoding("EUC-KR");
		PrintWriter writer = response.getWriter();
		writer.println("<script type='text/javascript'>");
		writer.println("alert('\ubcc0\uacbd \ub418\uc5c8\uc2b5\ub2c8\ub2e4.');");
		writer.println("location.href='ini_manage_user_write.jsp?userId="+userId+"'");
		writer.println("</script>");
		writer.flush();

	} else {

		q = "";
		q += "				SELECT  A.USERID" ;
		q += "				  FROM  MNG_USER A" ;
		q += "				 WHERE  1=1" ;
		q += "				   AND  A.GUBUN = '"+gubun+"'" ;
		q += "				   AND  A.USERID = '"+userId+"'" ;

		rs = stmt.executeQuery(q);
		if (rs.isBeforeFirst()) {
			response.setCharacterEncoding("EUC-KR");
			PrintWriter writer = response.getWriter();
			writer.println("<script type='text/javascript'>");
			writer.println("alert('\ud574\ub2f9 \uc0ac\ubc88("+ userId +")\uc740 \uc774\ubbf8 \uc608\uc678\uc0ac\uc6a9\uc790\ub85c \ub4f1\ub85d\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.');");
			writer.println("history.back(-1);");
		    writer.println("</script>");
			writer.flush();
			return;			
		} 
		rs.next();
		
		q = "";
		q += "	INSERT INTO MNG_USER";
		q += "		 (  USERID";
		q += "		 ,  GUBUN";
		q += "		 ,  REPLACE_CELLNO";
		q += "		 ) ";
		q += "VALUES (  '"+userId+"'";
		q += "		 ,  '"+gubun+"'";
		q += "		 ,  '"+REPLACE_CELLNO+"'";
		q += "		 )";
		rs = stmt.executeQuery(q);

		response.setCharacterEncoding("EUC-KR");
		PrintWriter writer = response.getWriter();
		writer.println("<script type='text/javascript'>");
		writer.println("alert('\ub4f1\ub85d \ub418\uc5c8\uc2b5\ub2c8\ub2e4.');");
		writer.println("location.href='ini_manage_user.jsp'");
		writer.println("</script>");
		writer.flush();
	}
	
} catch(Exception e) {
	e.printStackTrace();
} finally {
	rs.close();
	conn.close();
}

  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != -1257324557874484737L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("certcenter64/inica70/ini_manage_user_writeok.jsp"), -4364730642496714200L, true);
    _caucho_depends.add(depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("certcenter64/inica70/import/iniplugin_init.jsp"), -1077120484095086999L, true);
    _caucho_depends.add(depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("certcenter64/inica70/import/inica70_init.jsp"), 4796767119961629043L, true);
    _caucho_depends.add(depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("certcenter64/inica70/import/func.jsp"), -134361262012752146L, true);
    _caucho_depends.add(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string1;
  private final static char []_jsp_string0;
  private final static char []_jsp_string2;
  static {
    _jsp_string1 = "\r\n\n".toCharArray();
    _jsp_string0 = "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n\n".toCharArray();
    _jsp_string2 = "\n\n\n\r\n\n \n \n	\n\r\n".toCharArray();
  }
}
